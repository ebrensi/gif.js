{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/base64-js/index.js","node_modules/buffer/index.js","node_modules/ieee754/index.js","src/input.js","src/LZWEncoder.js","src/src/input.js","src/gif.worker.coffee"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","byteLength","toByteArray","fromByteArray","lookup","revLookup","Arr","Uint8Array","Array","len","charCodeAt","getLens","b64","validLen","indexOf","placeHoldersLen","lens","_byteLength","tmp","arr","curByte","tripletToBase64","num","encodeChunk","uint8","start","end","output","push","join","extraBytes","parts","maxChunkLength","len2","base64","ieee754","customInspectSymbol","Symbol","for","Buffer","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","kMaxLength","TYPED_ARRAY_SUPPORT","typedArraySupport","console","error","proto","foo","Object","setPrototypeOf","prototype","defineProperty","enumerable","get","isBuffer","this","undefined","buffer","byteOffset","createBuffer","RangeError","buf","arg","encodingOrOffset","TypeError","allocUnsafe","from","poolSize","value","fromString","ArrayBuffer","isView","fromArrayLike","isInstance","fromArrayBuffer","SharedArrayBuffer","valueOf","b","fromObject","toPrimitive","assertSize","size","alloc","fill","encoding","checked","allocUnsafeSlow","string","isEncoding","actual","write","slice","array","obj","copy","numberIsNaN","type","isArray","data","toString","_isBuffer","compare","offset","x","y","Math","min","String","toLowerCase","concat","list","pos","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","m","swap16","swap32","swap64","apply","toLocaleString","equals","inspect","str","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","j","includes","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","isFinite","toJSON","_arr","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","fromCharCode","ret","out","hexSliceLookupTable","bytes","newBuf","subarray","checkOffset","ext","readUIntLE","noAssert","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","checkInt","writeUIntLE","maxBytes","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","checkIEEE754","writeFloat","littleEndian","writeFloatLE","writeFloatBE","writeDouble","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","set","INVALID_BASE64_RE","base64clean","split","units","Infinity","leadSurrogate","byteArray","hi","lo","src","dst","constructor","name","alphabet","table","i16","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","abs","isNaN","floor","log","LN2","NeuQuant","LZWEncoder","ByteArray","page","pages","newPage","pageSize","charMap","cursor","getData","rv","writeByte","writeUTFBytes","l","writeBytes","GIFEncoder","width","height","transparent","transIndex","repeat","delay","image","pixels","indexedPixels","colorDepth","colorTab","neuQuant","usedEntry","palSize","dispose","firstFrame","sample","dither","globalPalette","setDelay","milliseconds","round","setFrameRate","fps","setDispose","disposalCode","setRepeat","setTransparent","color","addFrame","imageData","getImagePixels","analyzePixels","writeLSD","writePalette","writeNetscapeExt","writeGraphicCtrlExt","writeImageDesc","writePixels","finish","setQuality","quality","setDither","setGlobalPalette","palette","getGlobalPalette","writeHeader","buildColormap","getColormap","ditherPixels","match","indexPixels","findClosest","imgq","nPix","k","index","findClosestRGB","kernel","serpentine","kernels","FalseFloydSteinberg","FloydSteinberg","Stucki","Atkinson","ds","direction","xend","idx","r1","g1","b1","r2","g2","b2","er","eg","eb","x1","y1","used","g","lookupRGB","minpos","dmin","dr","dg","db","w","h","srcPos","count","transp","disp","writeShort","pValue","enc","encode","stream","EOF","BITS","HSIZE","masks","initCodeSize","accum","htab","Int32Array","codetab","cur_accum","cur_bits","a_count","free_ent","maxcode","clear_flg","g_init_bits","ClearCode","EOFCode","char_out","outs","flush_char","cl_block","cl_hash","hsize","compress","init_bits","fcode","ent","hsize_reg","hshift","n_bits","MAXCODE","nextPixel","outer_loop","curPixel","pix","wamodule","WebAssembly","Module","instance","memarray","samplefac","Table","initial","element","memory","Memory","env","memoryBase","tableBase","memset","_grow","_abort","_exit","Instance","pixelPtr","malloc","init","learn","unbiasnet","inxbuild","free","map","mapPtr","inxsearch","renderFrame","frame","encoder","transfer","last","canTransfer","ref","results","self","postMessage","onmessage","event"],"mappings":"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","sourceRoot":"","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? Symbol.for('nodejs.util.inspect.custom')\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*\n  GIFEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n*/\n\nvar NeuQuant = require('./WasmNeuQuant.js');\nvar LZWEncoder = require('./LZWEncoder.js');\n\nfunction ByteArray() {\n  this.page = -1;\n  this.pages = [];\n  this.newPage();\n}\n\nByteArray.pageSize = 4096;\nByteArray.charMap = {};\n\nfor (var i = 0; i < 256; i++)\n  ByteArray.charMap[i] = String.fromCharCode(i);\n\nByteArray.prototype.newPage = function() {\n  this.pages[++this.page] = new Uint8Array(ByteArray.pageSize);\n  this.cursor = 0;\n};\n\nByteArray.prototype.getData = function() {\n  var rv = '';\n  for (var p = 0; p < this.pages.length; p++) {\n    for (var i = 0; i < ByteArray.pageSize; i++) {\n      rv += ByteArray.charMap[this.pages[p][i]];\n    }\n  }\n  return rv;\n};\n\nByteArray.prototype.writeByte = function(val) {\n  if (this.cursor >= ByteArray.pageSize) this.newPage();\n  this.pages[this.page][this.cursor++] = val;\n};\n\nByteArray.prototype.writeUTFBytes = function(string) {\n  for (var l = string.length, i = 0; i < l; i++)\n    this.writeByte(string.charCodeAt(i));\n};\n\nByteArray.prototype.writeBytes = function(array, offset, length) {\n  for (var l = length || array.length, i = offset || 0; i < l; i++)\n    this.writeByte(array[i]);\n};\n\nfunction GIFEncoder(width, height) {\n  // image size\n  this.width = ~~width;\n  this.height = ~~height;\n\n  // transparent color if given\n  this.transparent = null;\n\n  // transparent index in color table\n  this.transIndex = 0;\n\n  // -1 = no repeat, 0 = forever. anything else is repeat count\n  this.repeat = -1;\n\n  // frame delay (hundredths)\n  this.delay = 0;\n\n  this.image = null; // current frame\n  this.pixels = null; // BGR byte array from frame\n  this.indexedPixels = null; // converted frame indexed to palette\n  this.colorDepth = null; // number of bit planes\n  this.colorTab = null; // RGB palette\n  this.neuQuant = null; // NeuQuant instance that was used to generate this.colorTab.\n  this.usedEntry = new Array(); // active palette entries\n  this.palSize = 7; // color table size (bits-1)\n  this.dispose = -1; // disposal code (-1 = use default)\n  this.firstFrame = true;\n  this.sample = 10; // default sample interval for quantizer\n  this.dither = false; // default dithering\n  this.globalPalette = false;\n\n  this.out = new ByteArray();\n}\n\n/*\n  Sets the delay time between each frame, or changes it for subsequent frames\n  (applies to last frame added)\n*/\nGIFEncoder.prototype.setDelay = function(milliseconds) {\n  this.delay = Math.round(milliseconds / 10);\n};\n\n/*\n  Sets frame rate in frames per second.\n*/\nGIFEncoder.prototype.setFrameRate = function(fps) {\n  this.delay = Math.round(100 / fps);\n};\n\n/*\n  Sets the GIF frame disposal code for the last added frame and any\n  subsequent frames.\n\n  Default is 0 if no transparent color has been set, otherwise 2.\n*/\nGIFEncoder.prototype.setDispose = function(disposalCode) {\n  if (disposalCode >= 0) this.dispose = disposalCode;\n};\n\n/*\n  Sets the number of times the set of GIF frames should be played.\n\n  -1 = play once\n  0 = repeat indefinitely\n\n  Default is -1\n\n  Must be invoked before the first image is added\n*/\n\nGIFEncoder.prototype.setRepeat = function(repeat) {\n  this.repeat = repeat;\n};\n\n/*\n  Sets the transparent color for the last added frame and any subsequent\n  frames. Since all colors are subject to modification in the quantization\n  process, the color in the final palette for each frame closest to the given\n  color becomes the transparent color for that frame. May be set to null to\n  indicate no transparent color.\n*/\nGIFEncoder.prototype.setTransparent = function(color) {\n  this.transparent = color;\n};\n\n/*\n  Adds next GIF frame. The frame is not written immediately, but is\n  actually deferred until the next frame is received so that timing\n  data can be inserted.  Invoking finish() flushes all frames.\n*/\nGIFEncoder.prototype.addFrame = function(imageData) {\n  this.image = imageData;\n\n  this.colorTab = this.globalPalette && this.globalPalette.slice ? this.globalPalette : null;\n\n  this.getImagePixels(); // convert to correct format if necessary\n  this.analyzePixels(); // build color table & map pixels\n\n  if (this.globalPalette === true) this.globalPalette = this.colorTab;\n\n  if (this.firstFrame) {\n    this.writeLSD(); // logical screen descriptior\n    this.writePalette(); // global color table\n    if (this.repeat >= 0) {\n      // use NS app extension to indicate reps\n      this.writeNetscapeExt();\n    }\n  }\n\n  this.writeGraphicCtrlExt(); // write graphic control extension\n  this.writeImageDesc(); // image descriptor\n  if (!this.firstFrame && !this.globalPalette) this.writePalette(); // local color table\n  this.writePixels(); // encode and write pixel data\n\n  this.firstFrame = false;\n};\n\n/*\n  Adds final trailer to the GIF stream, if you don't call the finish method\n  the GIF stream will not be valid.\n*/\nGIFEncoder.prototype.finish = function() {\n  this.out.writeByte(0x3b); // gif trailer\n};\n\n/*\n  Sets quality of color quantization (conversion of images to the maximum 256\n  colors allowed by the GIF specification). Lower values (minimum = 1)\n  produce better colors, but slow processing significantly. 10 is the\n  default, and produces good color mapping at reasonable speeds. Values\n  greater than 20 do not yield significant improvements in speed.\n*/\nGIFEncoder.prototype.setQuality = function(quality) {\n  if (quality < 1) quality = 1;\n  this.sample = quality;\n};\n\n/*\n  Sets dithering method. Available are:\n  - FALSE no dithering\n  - TRUE or FloydSteinberg\n  - FalseFloydSteinberg\n  - Stucki\n  - Atkinson\n  You can add '-serpentine' to use serpentine scanning\n*/\nGIFEncoder.prototype.setDither = function(dither) {\n  if (dither === true) dither = 'FloydSteinberg';\n  this.dither = dither;\n};\n\n/*\n  Sets global palette for all frames.\n  You can provide TRUE to create global palette from first picture.\n  Or an array of r,g,b,r,g,b,...\n*/\nGIFEncoder.prototype.setGlobalPalette = function(palette) {\n  this.globalPalette = palette;\n};\n\n/*\n  Returns global palette used for all frames.\n  If setGlobalPalette(true) was used, then this function will return\n  calculated palette after the first frame is added.\n*/\nGIFEncoder.prototype.getGlobalPalette = function() {\n  return (this.globalPalette && this.globalPalette.slice && this.globalPalette.slice(0)) || this.globalPalette;\n};\n\n/*\n  Writes GIF file header\n*/\nGIFEncoder.prototype.writeHeader = function() {\n  this.out.writeUTFBytes(\"GIF89a\");\n};\n\n/*\n  Analyzes current frame colors and creates color map.\n*/\nGIFEncoder.prototype.analyzePixels = function() {\n  if (!this.colorTab) {\n    this.neuQuant = new NeuQuant(this.pixels, this.sample);\n    this.neuQuant.buildColormap(); // create reduced palette\n    this.colorTab = this.neuQuant.getColormap();\n  }\n\n  // map image pixels to new palette\n  if (this.dither) {\n    this.ditherPixels(this.dither.replace('-serpentine', ''), this.dither.match(/-serpentine/) !== null);\n  } else {\n    this.indexPixels();\n  }\n\n  this.pixels = null;\n  this.colorDepth = 8;\n  this.palSize = 7;\n\n  // get closest match to transparent color if specified\n  if (this.transparent !== null) {\n    this.transIndex = this.findClosest(this.transparent, true);\n  }\n};\n\n/*\n  Index pixels, without dithering\n*/\nGIFEncoder.prototype.indexPixels = function(imgq) {\n  var nPix = this.pixels.length / 3;\n  this.indexedPixels = new Uint8Array(nPix);\n  var k = 0;\n  for (var j = 0; j < nPix; j++) {\n    var index = this.findClosestRGB(\n      this.pixels[k++] & 0xff,\n      this.pixels[k++] & 0xff,\n      this.pixels[k++] & 0xff\n    );\n    this.usedEntry[index] = true;\n    this.indexedPixels[j] = index;\n  }\n};\n\n/*\n  Taken from http://jsbin.com/iXofIji/2/edit by PAEz\n*/\nGIFEncoder.prototype.ditherPixels = function(kernel, serpentine) {\n  var kernels = {\n    FalseFloydSteinberg: [\n      [3 / 8, 1, 0],\n      [3 / 8, 0, 1],\n      [2 / 8, 1, 1]\n    ],\n    FloydSteinberg: [\n      [7 / 16, 1, 0],\n      [3 / 16, -1, 1],\n      [5 / 16, 0, 1],\n      [1 / 16, 1, 1]\n    ],\n    Stucki: [\n      [8 / 42, 1, 0],\n      [4 / 42, 2, 0],\n      [2 / 42, -2, 1],\n      [4 / 42, -1, 1],\n      [8 / 42, 0, 1],\n      [4 / 42, 1, 1],\n      [2 / 42, 2, 1],\n      [1 / 42, -2, 2],\n      [2 / 42, -1, 2],\n      [4 / 42, 0, 2],\n      [2 / 42, 1, 2],\n      [1 / 42, 2, 2]\n    ],\n    Atkinson: [\n      [1 / 8, 1, 0],\n      [1 / 8, 2, 0],\n      [1 / 8, -1, 1],\n      [1 / 8, 0, 1],\n      [1 / 8, 1, 1],\n      [1 / 8, 0, 2]\n    ]\n  };\n\n  if (!kernel || !kernels[kernel]) {\n    throw 'Unknown dithering kernel: ' + kernel;\n  }\n\n  var ds = kernels[kernel];\n  var index = 0,\n    height = this.height,\n    width = this.width,\n    data = this.pixels;\n  var direction = serpentine ? -1 : 1;\n\n  this.indexedPixels = new Uint8Array(this.pixels.length / 3);\n\n  for (var y = 0; y < height; y++) {\n\n    if (serpentine) direction = direction * -1;\n\n    for (var x = (direction == 1 ? 0 : width - 1), xend = (direction == 1 ? width : 0); x !== xend; x += direction) {\n\n      index = (y * width) + x;\n      // Get original colour\n      var idx = index * 3;\n      var r1 = data[idx];\n      var g1 = data[idx + 1];\n      var b1 = data[idx + 2];\n\n      // Get converted colour\n      idx = this.findClosestRGB(r1, g1, b1);\n      this.usedEntry[idx] = true;\n      this.indexedPixels[index] = idx;\n      idx *= 3;\n      var r2 = this.colorTab[idx];\n      var g2 = this.colorTab[idx + 1];\n      var b2 = this.colorTab[idx + 2];\n\n      var er = r1 - r2;\n      var eg = g1 - g2;\n      var eb = b1 - b2;\n\n      for (var i = (direction == 1 ? 0: ds.length - 1), end = (direction == 1 ? ds.length : 0); i !== end; i += direction) {\n        var x1 = ds[i][1]; // *direction;  //  Should this by timesd by direction?..to make the kernel go in the opposite direction....got no idea....\n        var y1 = ds[i][2];\n        if (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {\n          var d = ds[i][0];\n          idx = index + x1 + (y1 * width);\n          idx *= 3;\n\n          data[idx] = Math.max(0, Math.min(255, data[idx] + er * d));\n          data[idx + 1] = Math.max(0, Math.min(255, data[idx + 1] + eg * d));\n          data[idx + 2] = Math.max(0, Math.min(255, data[idx + 2] + eb * d));\n        }\n      }\n    }\n  }\n};\n\n/*\n  Returns index of palette color closest to c\n*/\nGIFEncoder.prototype.findClosest = function(c, used) {\n  return this.findClosestRGB((c & 0xFF0000) >> 16, (c & 0x00FF00) >> 8, (c & 0x0000FF), used);\n};\n\nGIFEncoder.prototype.findClosestRGB = function(r, g, b, used) {\n  if (this.colorTab === null) return -1;\n\n  if (this.neuQuant && !used) {\n    return this.neuQuant.lookupRGB(r, g, b);\n  }\n\n  var c = b | (g << 8) | (r << 16);\n\n  var minpos = 0;\n  var dmin = 256 * 256 * 256;\n  var len = this.colorTab.length;\n\n  for (var i = 0, index = 0; i < len; index++) {\n    var dr = r - (this.colorTab[i++] & 0xff);\n    var dg = g - (this.colorTab[i++] & 0xff);\n    var db = b - (this.colorTab[i++] & 0xff);\n    var d = dr * dr + dg * dg + db * db;\n    if ((!used || this.usedEntry[index]) && (d < dmin)) {\n      dmin = d;\n      minpos = index;\n    }\n  }\n\n  return minpos;\n};\n\n/*\n  Extracts image pixels into byte array pixels\n  (removes alphachannel from canvas imagedata)\n*/\nGIFEncoder.prototype.getImagePixels = function() {\n  var w = this.width;\n  var h = this.height;\n  this.pixels = new Uint8Array(w * h * 3);\n\n  var data = this.image;\n  var srcPos = 0;\n  var count = 0;\n\n  for (var i = 0; i < h; i++) {\n    for (var j = 0; j < w; j++) {\n      this.pixels[count++] = data[srcPos++];\n      this.pixels[count++] = data[srcPos++];\n      this.pixels[count++] = data[srcPos++];\n      srcPos++;\n    }\n  }\n};\n\n/*\n  Writes Graphic Control Extension\n*/\nGIFEncoder.prototype.writeGraphicCtrlExt = function() {\n  this.out.writeByte(0x21); // extension introducer\n  this.out.writeByte(0xf9); // GCE label\n  this.out.writeByte(4); // data block size\n\n  var transp, disp;\n  if (this.transparent === null) {\n    transp = 0;\n    disp = 0; // dispose = no action\n  } else {\n    transp = 1;\n    disp = 2; // force clear if using transparent color\n  }\n\n  if (this.dispose >= 0) {\n    disp = this.dispose & 7; // user override\n  }\n  disp <<= 2;\n\n  // packed fields\n  this.out.writeByte(\n    0 | // 1:3 reserved\n    disp | // 4:6 disposal\n    0 | // 7 user input - 0 = none\n    transp // 8 transparency flag\n  );\n\n  this.writeShort(this.delay); // delay x 1/100 sec\n  this.out.writeByte(this.transIndex); // transparent color index\n  this.out.writeByte(0); // block terminator\n};\n\n/*\n  Writes Image Descriptor\n*/\nGIFEncoder.prototype.writeImageDesc = function() {\n  this.out.writeByte(0x2c); // image separator\n  this.writeShort(0); // image position x,y = 0,0\n  this.writeShort(0);\n  this.writeShort(this.width); // image size\n  this.writeShort(this.height);\n\n  // packed fields\n  if (this.firstFrame || this.globalPalette) {\n    // no LCT - GCT is used for first (or only) frame\n    this.out.writeByte(0);\n  } else {\n    // specify normal LCT\n    this.out.writeByte(\n      0x80 | // 1 local color table 1=yes\n      0 | // 2 interlace - 0=no\n      0 | // 3 sorted - 0=no\n      0 | // 4-5 reserved\n      this.palSize // 6-8 size of color table\n    );\n  }\n};\n\n/*\n  Writes Logical Screen Descriptor\n*/\nGIFEncoder.prototype.writeLSD = function() {\n  // logical screen size\n  this.writeShort(this.width);\n  this.writeShort(this.height);\n\n  // packed fields\n  this.out.writeByte(\n    0x80 | // 1 : global color table flag = 1 (gct used)\n    0x70 | // 2-4 : color resolution = 7\n    0x00 | // 5 : gct sort flag = 0\n    this.palSize // 6-8 : gct size\n  );\n\n  this.out.writeByte(0); // background color index\n  this.out.writeByte(0); // pixel aspect ratio - assume 1:1\n};\n\n/*\n  Writes Netscape application extension to define repeat count.\n*/\nGIFEncoder.prototype.writeNetscapeExt = function() {\n  this.out.writeByte(0x21); // extension introducer\n  this.out.writeByte(0xff); // app extension label\n  this.out.writeByte(11); // block size\n  this.out.writeUTFBytes('NETSCAPE2.0'); // app id + auth code\n  this.out.writeByte(3); // sub-block size\n  this.out.writeByte(1); // loop sub-block id\n  this.writeShort(this.repeat); // loop count (extra iterations, 0=repeat forever)\n  this.out.writeByte(0); // block terminator\n};\n\n/*\n  Writes color table\n*/\nGIFEncoder.prototype.writePalette = function() {\n  this.out.writeBytes(this.colorTab);\n  var n = (3 * 256) - this.colorTab.length;\n  for (var i = 0; i < n; i++)\n    this.out.writeByte(0);\n};\n\nGIFEncoder.prototype.writeShort = function(pValue) {\n  this.out.writeByte(pValue & 0xFF);\n  this.out.writeByte((pValue >> 8) & 0xFF);\n};\n\n/*\n  Encodes and writes pixel data\n*/\nGIFEncoder.prototype.writePixels = function() {\n  var enc = new LZWEncoder(this.width, this.height, this.indexedPixels, this.colorDepth);\n  enc.encode(this.out);\n};\n\n/*\n  Retrieves the GIF stream\n*/\nGIFEncoder.prototype.stream = function() {\n  return this.out;\n};\n\nmodule.exports = GIFEncoder;\n","/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\n\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n             0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n             0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nfunction LZWEncoder(width, height, pixels, colorDepth) {\n  var initCodeSize = Math.max(2, colorDepth);\n\n  var accum = new Uint8Array(256);\n  var htab = new Int32Array(HSIZE);\n  var codetab = new Int32Array(HSIZE);\n\n  var cur_accum, cur_bits = 0;\n  var a_count;\n  var free_ent = 0; // first unused entry\n  var maxcode;\n\n  // block compression parameters -- after all codes are used up,\n  // and compression rate changes, start over.\n  var clear_flg = false;\n\n  // Algorithm: use open addressing double hashing (no chaining) on the\n  // prefix code / next character combination. We do a variant of Knuth's\n  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n  // secondary probe. Here, the modular division first probe is gives way\n  // to a faster exclusive-or manipulation. Also do block compression with\n  // an adaptive reset, whereby the code table is cleared when the compression\n  // ratio decreases, but after the table fills. The variable-length output\n  // codes are re-sized at this point, and a special CLEAR code is generated\n  // for the decompressor. Late addition: construct the table according to\n  // file size for noticeable speed improvement on small files. Please direct\n  // questions about this implementation to ames!jaw.\n  var g_init_bits, ClearCode, EOFCode;\n\n  // Add a character to the end of the current packet, and if it is 254\n  // characters, flush the packet to disk.\n  function char_out(c, outs) {\n    accum[a_count++] = c;\n    if (a_count >= 254) flush_char(outs);\n  }\n\n  // Clear out the hash table\n  // table clear for block compress\n  function cl_block(outs) {\n    cl_hash(HSIZE);\n    free_ent = ClearCode + 2;\n    clear_flg = true;\n    output(ClearCode, outs);\n  }\n\n  // Reset code table\n  function cl_hash(hsize) {\n    for (var i = 0; i < hsize; ++i) htab[i] = -1;\n  }\n\n  function compress(init_bits, outs) {\n    var fcode, c, i, ent, disp, hsize_reg, hshift;\n\n    // Set up the globals: g_init_bits - initial number of bits\n    g_init_bits = init_bits;\n\n    // Set up the necessary values\n    clear_flg = false;\n    n_bits = g_init_bits;\n    maxcode = MAXCODE(n_bits);\n\n    ClearCode = 1 << (init_bits - 1);\n    EOFCode = ClearCode + 1;\n    free_ent = ClearCode + 2;\n\n    a_count = 0; // clear packet\n\n    ent = nextPixel();\n\n    hshift = 0;\n    for (fcode = HSIZE; fcode < 65536; fcode *= 2) ++hshift;\n    hshift = 8 - hshift; // set hash code range bound\n    hsize_reg = HSIZE;\n    cl_hash(hsize_reg); // clear hash table\n\n    output(ClearCode, outs);\n\n    outer_loop: while ((c = nextPixel()) != EOF) {\n      fcode = (c << BITS) + ent;\n      i = (c << hshift) ^ ent; // xor hashing\n      if (htab[i] === fcode) {\n        ent = codetab[i];\n        continue;\n      } else if (htab[i] >= 0) { // non-empty slot\n        disp = hsize_reg - i; // secondary hash (after G. Knott)\n        if (i === 0) disp = 1;\n        do {\n          if ((i -= disp) < 0) i += hsize_reg;\n          if (htab[i] === fcode) {\n            ent = codetab[i];\n            continue outer_loop;\n          }\n        } while (htab[i] >= 0);\n      }\n      output(ent, outs);\n      ent = c;\n      if (free_ent < 1 << BITS) {\n        codetab[i] = free_ent++; // code -> hashtable\n        htab[i] = fcode;\n      } else {\n        cl_block(outs);\n      }\n    }\n\n    // Put out the final code.\n    output(ent, outs);\n    output(EOFCode, outs);\n  }\n\n  function encode(outs) {\n    outs.writeByte(initCodeSize); // write \"initial code size\" byte\n    remaining = width * height; // reset navigation variables\n    curPixel = 0;\n    compress(initCodeSize + 1, outs); // compress and write the pixel data\n    outs.writeByte(0); // write block terminator\n  }\n\n  // Flush the packet to disk, and reset the accumulator\n  function flush_char(outs) {\n    if (a_count > 0) {\n      outs.writeByte(a_count);\n      outs.writeBytes(accum, 0, a_count);\n      a_count = 0;\n    }\n  }\n\n  function MAXCODE(n_bits) {\n    return (1 << n_bits) - 1;\n  }\n\n  // Return the next pixel from the image\n  function nextPixel() {\n    if (remaining === 0) return EOF;\n    --remaining;\n    var pix = pixels[curPixel++];\n    return pix & 0xff;\n  }\n\n  function output(code, outs) {\n    cur_accum &= masks[cur_bits];\n\n    if (cur_bits > 0) cur_accum |= (code << cur_bits);\n    else cur_accum = code;\n\n    cur_bits += n_bits;\n\n    while (cur_bits >= 8) {\n      char_out((cur_accum & 0xff), outs);\n      cur_accum >>= 8;\n      cur_bits -= 8;\n    }\n\n    // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n    if (free_ent > maxcode || clear_flg) {\n      if (clear_flg) {\n        maxcode = MAXCODE(n_bits = g_init_bits);\n        clear_flg = false;\n      } else {\n        ++n_bits;\n        if (n_bits == BITS) maxcode = 1 << BITS;\n        else maxcode = MAXCODE(n_bits);\n      }\n    }\n\n    if (code == EOFCode) {\n      // At EOF, write the rest of the buffer.\n      while (cur_bits > 0) {\n        char_out((cur_accum & 0xff), outs);\n        cur_accum >>= 8;\n        cur_bits -= 8;\n      }\n      flush_char(outs);\n    }\n  }\n\n  this.encode = encode;\n}\n\nmodule.exports = LZWEncoder;\n","var fs = require('fs')\n\n// this is an ugly hack since i don't want to\n// refactor the worker for async loads just yet\nvar src = fs.readFileSync(__dirname + '/NeuQuant.wasm')\nvar wamodule = new WebAssembly.Module(src)\nvar instance\nvar memarray\n\nfunction NeuQuant(pixels, samplefac) {\n  if (!instance) {\n    var table = new WebAssembly.Table({initial: 0, element: 'anyfunc'})\n    var memory = new WebAssembly.Memory({initial: 1})\n    memarray = new Uint8Array(memory.buffer)\n\n    var env = {}\n    env.memoryBase = 0\n    env.memory = memory\n    env.tableBase = 0\n    env.table = table\n\n    env.memset = function(){} // instance complains about it missing\n                              // when compiled with optimizations,\n                              // seems not to have any effect?\n\n    env._grow = function() { memarray = new Uint8Array(memory.buffer) }\n    env._abort = function() { throw new Error('Abort') }\n    env._exit = function() { throw new Error('Exit') }\n    instance = new WebAssembly.Instance(wamodule, {env: env})\n  }\n\n  var pixelPtr = instance.exports.malloc(pixels.byteLength)\n  memarray.set(pixels, pixelPtr)\n\n  instance.exports.init(pixelPtr, pixels.length, samplefac)\n\n  this.buildColormap = function(){\n    instance.exports.learn()\n    instance.exports.unbiasnet()\n    instance.exports.inxbuild()\n    instance.exports.free(pixelPtr)\n  }\n\n  this.getColormap = function(){\n    var map = new Uint8Array(256*3)\n    var mapPtr = instance.exports.getColormap()\n    map.set(memarray.subarray(mapPtr, mapPtr + map.byteLength))\n    return map\n  }\n\n  this.lookupRGB = instance.exports.inxsearch\n}\n\nmodule.exports = NeuQuant\n","GIFEncoder = require './GIFEncoder.js'\n\nrenderFrame = (frame) ->\n  encoder = new GIFEncoder frame.width, frame.height\n\n  if frame.index is 0\n    encoder.writeHeader()\n  else\n    encoder.firstFrame = false\n\n  encoder.setTransparent frame.transparent\n  encoder.setDispose frame.dispose\n  encoder.setRepeat frame.repeat\n  encoder.setDelay frame.delay\n  encoder.setQuality frame.quality\n  encoder.setDither frame.dither\n  encoder.setGlobalPalette frame.globalPalette\n  encoder.addFrame frame.data\n  encoder.finish() if frame.last\n  if frame.globalPalette == true\n    frame.globalPalette = encoder.getGlobalPalette()\n\n  stream = encoder.stream()\n  frame.data = stream.pages\n  frame.cursor = stream.cursor\n  frame.pageSize = stream.constructor.pageSize\n\n  if frame.canTransfer\n    transfer = (page.buffer for page in frame.data)\n    self.postMessage frame, transfer\n  else\n    self.postMessage frame\n\nself.onmessage = (event) -> renderFrame event.data\n"]}